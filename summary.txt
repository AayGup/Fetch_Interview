Q1) Why did you choose the tools, libraries, and language you used for the coding exercise?
Ans) I selected Python as the programming language due to its widespread use, readability, and extensive library support. For the REST API, I opted for Flask, a lightweight and user-friendly web framework. Flask is particularly suitable for small to medium-sized web applications, offering a straightforward and intuitive API for defining routes and handling requests efficiently.

Q2) What are the advantages and disadvantages of your solution?
Ans) Advantages:
- The solution is straightforward and easy to comprehend.
- Flask's lightweight nature and low learning curve facilitate quick development and deployment of REST APIs.
- Python's readability and maintainability enhance the overall quality of the code.
- The implementation effectively addresses the core requirements of adding points, spending points, and retrieving the current balance.

Disadvantages:
- Flask may not be suitable for very large-scale applications due to its simplicity and lack of built-in features for scalability.
- The solution assumes a single user and does not handle multiple users or accounts, which may be a limitation in a real-world scenario.
- Error handling could be improved to provide more detailed error messages and handle edge cases more gracefully.

Q3) What has been a favorite school/personal project thus far? What about it that challenged you?
Ans) One of my favorite college projects was a research initiative that was published in IEEE, titled "Smart Camera for Enforcing Social Distancing." This project focused on developing a real-time model for detecting social distancing violations with high precision and recall. More details can be found in the IEEE publication https://ieeexplore.ieee.org/abstract/document/9701079.

Challenges Faced
- Coordination During COVID-19: Remote work during the pandemic made coordination difficult, requiring frequent virtual meetings and extensive use of collaboration tools to resolve misalignments and code issues.
- Real-Time Performance: Ensuring the model was fast and efficient enough for real-time results required extensive optimization and testing, balancing speed with accuracy through iterative improvements.
- Maintaining Precision and Recall: Achieving high precision and recall involved deep algorithmic understanding and experimentation, carefully analyzing trade-offs to select the best techniques.

Key Takeaways
- Adaptability: Learned to find creative solutions to challenges posed by remote work.
- Collaboration: Emphasized the importance of effective communication and documentation.
- Technical Skills: Enhanced skills in model optimization and performance tuning, balancing speed, precision, and recall.

Overall, this project was a significant learning experience, improving my technical knowledge and teamwork abilities under challenging circumstances.
